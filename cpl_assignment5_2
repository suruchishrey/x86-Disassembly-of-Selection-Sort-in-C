#include<stdio.h>

float potentialEnergy(float m,float h)
{
    float g=9.81;
    float result=m*g*h;
    return result;
}

int main()
{
    float m,h,energy;
    printf("Enter mass and height");
    scanf("%f %f",&m,&h);
    energy=potentialEnergy(m,h);
    printf("\nEnergy=%f",energy);
    return 0;
}

potentialEnergy:                                            
        push    rbp                                         ;save the value of rbp
        mov     rbp, rsp                                    ;rbp now points to the top of the stack                                   
        sub 	rsp,24                                      ; space allocated on the stack for local variables
        movss   DWORD PTR [rbp-20], xmm0                    ;store the value of xmm0(argument) into m(DWORD PTR [rbp-20])
        movss   DWORD PTR [rbp-24], xmm1                    ;store the value of xmm1(argument) into h(DWORD PTR [rbp-24])
 line: float g=9.81;
        movss   xmm0, DWORD PTR .LC0[rip]                   ;rip relative addressing,it first goes to the label .LC0,then rip has become the next instruction following label so .LC0[rip] becomes data from that address(rip) which is the 9.81 there.        movss   DWORD PTR [rbp-4], xmm0
        movss   DWORD PTR [rbp-4], xmm0                     ;store the value of xmm0(9.81) into g(location DWORD PTR [rbp-4])
 line: float result=m*g*h;
        movss   xmm0, DWORD PTR [rbp-20]                    ;xmmo=m
        mulss   xmm0, DWORD PTR [rbp-4]                     ;multiply xmm0 with g and store the result into xmm0
        movss   xmm1, DWORD PTR [rbp-24]                    ;xmm1=h
        mulss   xmm0, xmm1                                  ;multiply xmm0 with xmm1 and store the result into xmm0
        movss   DWORD PTR [rbp-8], xmm0                     ;move the multiplied product into result(location DWORD PTR [rbp-8])
 line: return result;
        movss   xmm0, DWORD PTR [rbp-8]                     ;move the value of result into register xmm0
        pop     rbp                                         ;restore caller's rbp.
        ret                                                 ;pop the return address into rip
.LC1:
        .string "Enter mass and height"
.LC2:
        .string "%f %f"
.LC3:
        .string "\nEnergy=%f"
main:
        push    rbp                                         ;save the value of rbp
        mov     rbp, rsp                                    ;rbp now points to the top of the stack
        sub     rsp, 16                                     ; space allocated on the stack for local variables
 line:printf("Enter mass and height");
        mov     edi, OFFSET FLAT:.LC1                       ;first argument : format string
        mov     eax, 0                                      ;need to zero out the eax register , or else printf will assume we're passing it vector registers and crash.
        call    printf                                      ;call printf
 line: scanf("%f %f",&m,&h);
        lea     rdx, [rbp-12]                               ;(function second argument setup)load address of h([rbp-12] )in rdx
        lea     rax, [rbp-8]                                ;load address of m([rbp-8] )in rax
        mov     rsi, rax                                    ;(function second argument setup)store the address of m(which is in rax) into rsi
        mov     edi, OFFSET FLAT:.LC2                       ;(function first argument setup)set edi = address of .LC2(OFFSET FLAT translates to an absolute address of the label) 
        mov     eax, 0                                      ;put number of vector parameters as 0 in register to a variadic function(when we don't know the total number of arguments that will be used for a function)
        call    __isoc99_scanf                              ;call scanf
 line: energy=potentialEnergy(m,h);
        movss   xmm0, DWORD PTR [rbp-12]                    ;store the value of h into xmm0 register(128 bit)     
        mov     eax, DWORD PTR [rbp-8]                      ;store the value of m into eax
        movaps  xmm1, xmm0                                  ;xmm1=xmm0
        movd    xmm0, eax                                   ;move doubleword from eax to xmm0
        call    potentialEnergy                             ;call potentialEnergy
        movd    eax, xmm0                                   ;store the value at xmm0(result) into eax
        mov     DWORD PTR [rbp-4], eax                      ;energy(location DWORD PTR [rbp-4])=eax
 line: printf("\nEnergy=%f",energy);
        pxor    xmm2, xmm2                                  ;bitwise xor of xmm2 and xmm2(clearing the register)
        cvtss2sd        xmm2, DWORD PTR [rbp-4]             ;Convert one single-precision floating-point value in DWORD PTR [rbp-4](energy) to one double-precision floating-point value in xmm2.
        movq    rax, xmm2                                   ;rax=xmm2
        movq    xmm0, rax                                   ;xmm0=rax
        mov     edi, OFFSET FLAT:.LC3                       ;first argument : format string at .LC3
        mov     eax, 1                                      ;the floating-point literal is stored in a vector register and, correspondingly eax is set to 1
        call    printf                                      ;call printf
        mov     eax, 0                                      ;store the return value into eax
        leave                                               ;copy rbp to rsp and then restore the old rbp from the stack.
        ret                                                 ;pop the return address into rip
.LC0:
        .long   1092416963                                  ;this is an integer representation of the binary bit pattern of Single Precision IEEE754 Floating Point Standard representation of 9.81(here) and its hex is 0x411CF5C3

 Note:
 1)movss:Copies the data from source operand to destination operand. Used for Moving Scalar Single-Precision Floating-Point Values. The movss command can only be used with xmm registers. 
 2)movaps:to move data between two XMM registers( Move Aligned Packed Single-Precision).
 3)rip points to next instruction to execute.
 4)OFFSET FLAT translates to an absolute address of the label.